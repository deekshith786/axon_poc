type Profile{
    employee_Number: ID
    employee_Code: String
    first_Name: String
    middle_Name: String
    last_Name: String
    date_Of_Joining: String
    email: String
    date_Of_Birth: String
    gender: String
    role: String
    job_Title: String
    job_Role: String
    client_Company: String
    client_Company_Team: String
    client_Reporting_Manager: String
    qualification: String
    skill_Matrix: String
    status: String
}

type Address {

    employeeCode: ID
    houseOrFlatNumber: String
    street: String
    area: String
    locality: String
    city: String
    zipcode: String
    state: String
    country: String
    mobileNumber: String
    landlineNumber: String

}
input ProfileInput {
    employee_Number: ID
    employee_Code: String
    first_Name: String
    middle_Name: String
    last_Name: String
    date_Of_Joining: String
    email: String
    date_Of_Birth: String
    gender: String
    role: String
    job_Title: String
    job_Role: String
    client_Company: String
    client_Company_Team: String
    client_Reporting_Manager: String
    qualification: String
    skill_Matrix: String
    status: String
}

input AddressInput {

    employeeCode: ID
    houseOrFlatNumber: String
    street: String
    area: String
    locality: String
    city: String
    zipcode: String
    state: String
    country: String
    mobileNumber: String
    landlineNumber: String


}

type Query {
    getAllProfiles: [Profile]
    getAllAddress: [Address]
    #getProfileById(id: String): Profile!
}

type Mutation {
    addProfile(input: ProfileInput): Profile
    addAddress(input: AddressInput): Address
    #deleteProfile(id: String): String
}